/*
 * ConvertView.java
 */

package convert;

import convert.InputStreamListener;
import java.util.logging.Level;
import java.util.logging.Logger;
import org.jdesktop.application.Action;
import org.jdesktop.application.ResourceMap;
import org.jdesktop.application.SingleFrameApplication;
import org.jdesktop.application.FrameView;
import org.jdesktop.application.TaskMonitor;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.*;
import java.util.ArrayList;
import java.util.Enumeration;
import java.util.Hashtable;
import java.util.List;
import javax.swing.DefaultListModel;
import javax.swing.Timer;
import javax.swing.Icon;
import javax.swing.JDialog;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JList;

/**
 * The application's main frame.
 */

public class ConvertView extends FrameView implements Runnable {

    private String propPath = "build.properties";
    private String cmdFile = "forjavaapp.bat";
    DefaultListModel model = new DefaultListModel();
    private ArrayList<String> files = new ArrayList<String>();

    public class DitaFileFilter implements FileFilter
    {
      private final String[] okFileExtensions =
        new String[] {"ditamap"};

      public boolean accept(File file)
      {
        for (String extension : okFileExtensions)
        {
          if (file.getName().toLowerCase().endsWith(extension))
          {
            return true;
          }
        }
        return false;
      }
    }

    public ConvertView(SingleFrameApplication app) {
        super(app);

        initComponents();
        jLabel1.setText("DITA Version");
        jButton2.setText("Add ditamap file");
        jButton3.setText("Delete selected file");

        jScrollPane1.setVisible(false);
        jTextArea1.setVisible(false);
        jCheckBox1.setSelected(false);

        String prop = loadFileAsString(propPath, "UTF-8");
        String[] props = prop.split("\r\n");

        jTextField1.setText(props[0].split("=")[1]);

        if(System.getProperties().getProperty("os.name").indexOf("indows") > 0)
        {
            System.out.println(System.getProperties().getProperty("os.name"));
            cmdFile = "forjavaapp.bat";
        }
        else
        {
            cmdFile = "sh forjavaapp.sh";
        }
        jList1.setModel(model);

        //model.addElement(props[2].split("=")[1]);
    }

     /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        mainPanel = new javax.swing.JPanel();
        progressBar = new javax.swing.JProgressBar();
        jButton1 = new javax.swing.JButton();
        jCheckBox1 = new javax.swing.JCheckBox();
        jLabel1 = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jLayeredPane1 = new javax.swing.JLayeredPane();
        jScrollPane2 = new javax.swing.JScrollPane();
        jList1 = new javax.swing.JList();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();

        mainPanel.setName("mainPanel"); // NOI18N

        progressBar.setName("progressBar"); // NOI18N

        org.jdesktop.application.ResourceMap resourceMap = org.jdesktop.application.Application.getInstance(convert.ConvertApp.class).getContext().getResourceMap(ConvertView.class);
        jButton1.setText(resourceMap.getString("jButton1.text")); // NOI18N
        jButton1.setName("jButton1"); // NOI18N
        jButton1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButton1MouseClicked(evt);
            }
        });

        jCheckBox1.setSelected(true);
        jCheckBox1.setText(resourceMap.getString("jCheckBox1.text")); // NOI18N
        jCheckBox1.setName("jCheckBox1"); // NOI18N
        jCheckBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBox1ActionPerformed(evt);
            }
        });

        jLabel1.setText(resourceMap.getString("jLabel1.text")); // NOI18N
        jLabel1.setName("jLabel1"); // NOI18N

        jTextField1.setText(resourceMap.getString("jTextField1.text")); // NOI18N
        jTextField1.setName("jTextField1"); // NOI18N

        jButton2.setText(resourceMap.getString("jButton2.text")); // NOI18N
        jButton2.setName("jButton2"); // NOI18N
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton3.setText(resourceMap.getString("jButton3.text")); // NOI18N
        jButton3.setName("jButton3"); // NOI18N
        jButton3.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButton3MouseClicked(evt);
            }
        });

        jLayeredPane1.setName("jLayeredPane1"); // NOI18N

        jScrollPane2.setName("jScrollPane2"); // NOI18N

        jList1.setModel(new javax.swing.AbstractListModel() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        jList1.setName("jList1"); // NOI18N
        jScrollPane2.setViewportView(jList1);

        jScrollPane2.setBounds(0, 0, 460, 280);
        jLayeredPane1.add(jScrollPane2, javax.swing.JLayeredPane.DEFAULT_LAYER);

        jScrollPane1.setName("jScrollPane1"); // NOI18N

        jTextArea1.setColumns(20);
        jTextArea1.setEditable(false);
        jTextArea1.setFont(resourceMap.getFont("jTextArea1.font")); // NOI18N
        jTextArea1.setRows(5);
        jTextArea1.setText(resourceMap.getString("jTextArea1.text")); // NOI18N
        jTextArea1.setName("jTextArea1"); // NOI18N
        jScrollPane1.setViewportView(jTextArea1);

        jScrollPane1.setBounds(0, 0, 460, 280);
        jLayeredPane1.add(jScrollPane1, javax.swing.JLayeredPane.DEFAULT_LAYER);

        javax.swing.GroupLayout mainPanelLayout = new javax.swing.GroupLayout(mainPanel);
        mainPanel.setLayout(mainPanelLayout);
        mainPanelLayout.setHorizontalGroup(
            mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(mainPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, mainPanelLayout.createSequentialGroup()
                        .addComponent(jButton2, javax.swing.GroupLayout.DEFAULT_SIZE, 331, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton3))
                    .addComponent(progressBar, javax.swing.GroupLayout.DEFAULT_SIZE, 460, Short.MAX_VALUE)
                    .addComponent(jLayeredPane1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 460, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jCheckBox1, javax.swing.GroupLayout.DEFAULT_SIZE, 97, Short.MAX_VALUE)
                    .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, 123, Short.MAX_VALUE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jTextField1))
                .addContainerGap())
        );
        mainPanelLayout.setVerticalGroup(
            mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(mainPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(mainPanelLayout.createSequentialGroup()
                        .addComponent(jButton1)
                        .addGap(7, 7, 7)
                        .addComponent(jCheckBox1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, mainPanelLayout.createSequentialGroup()
                        .addComponent(jLayeredPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 282, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(progressBar, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(13, 13, 13)
                        .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jButton2)
                            .addComponent(jButton3))))
                .addContainerGap())
        );

        setComponent(mainPanel);
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton1MouseClicked
        // TODO add your handling code here:
      try
      {
            new Thread(this).start();
      }
      catch(Exception e){}
    }//GEN-LAST:event_jButton1MouseClicked

    private void jCheckBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBox1ActionPerformed
        // TODO add your handling code here:
        jScrollPane1.setVisible(jCheckBox1.isSelected());
        jTextArea1.setVisible(jCheckBox1.isSelected());
        jScrollPane2.setVisible(!jCheckBox1.isSelected());
        jList1.setVisible(!jCheckBox1.isSelected());
        jLayeredPane1.invalidate();
        jScrollPane1.invalidate();
        jScrollPane2.invalidate();

    }//GEN-LAST:event_jCheckBox1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        JFileChooser chooser = new JFileChooser();
        chooser.setCurrentDirectory(new File("."));
        ExtensionFileFilter filter = new ExtensionFileFilter("Only ditamap files", new String[] { "DITAMAP" });
        chooser.setFileFilter(filter);
        int returnVal = chooser.showOpenDialog(this.getFrame());
        if(returnVal == JFileChooser.APPROVE_OPTION) {
           //System.out.println("You chose to open this file: " + chooser.getSelectedFile().getName());
           model.addElement(chooser.getSelectedFile().getAbsolutePath());           
        }
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton3MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton3MouseClicked
        model.remove(jList1.getSelectedIndex());
    }//GEN-LAST:event_jButton3MouseClicked

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JCheckBox jCheckBox1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLayeredPane jLayeredPane1;
    private javax.swing.JList jList1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JPanel mainPanel;
    private javax.swing.JProgressBar progressBar;
    // End of variables declaration//GEN-END:variables

    public void run() {
          try
          {
                jTextArea1.setText("");
                
                ArrayList list = new ArrayList();
                jCheckBox1.setSelected(true);
                jCheckBox1ActionPerformed(null);
                String cmd = cmdFile;
                progressBar.setMaximum(100 * model.getSize());
                for(int i = 0; i < model.getSize(); i++)
                {
                    String source = String.valueOf(model.getElementAt(i)).replace("\\", "${file.separator}").replace("/", "${file.separator}");
                    source = source.substring(0, source.lastIndexOf("${file.separator}"));
                    String prop = "dita.version=" + jTextField1.getText().replace("/", "${file.separator}").replace("\\", "${file.separator}") + "\r\nsource.dir=in\r\nmap.file=" + String.valueOf(model.getElementAt(i)).replace("\\", "${file.separator}").replace("/", "${file.separator}");
                    saveFileAsString(propPath, "UTF-8", prop);

                    Process proc = Runtime.getRuntime().exec(cmd);
                    //File dir = new File("C:\\bin\\sandbox\\SopDitaDocumentation");
                    //Process proc = Runtime.getRuntime().exec("C:\\bin\\sandbox\\SopDitaDocumentation\\" + cmd, null, dir);

                    InputStreamDataListener isdl = new InputStreamDataListener(proc, jTextArea1, progressBar, i);
                    Thread isdlThread = new Thread(isdl);
                    try{
                    isdlThread.start();
                    } catch(Exception e) {
                        System.err.println("Error");
                    }
                    InputStreamListener isl = new InputStreamListener(proc, jTextArea1, isdlThread);
                    new Thread(isl).start();
                }
            }
            catch(Exception e){ jTextArea1.append("Global Error\r\n"); }
            progressBar.setValue(100);
    }

    private String loadFileAsString(String file, String encoding) {
        InputStreamReader f = null;
        StringBuilder sb= new StringBuilder();
        try {
           f = encoding==null? new FileReader(file):
           new InputStreamReader(new FileInputStream(file),encoding);
           char[] buf= new char[32768];
           int len;
           while ((len=f.read(buf,0,buf.length))>=0) {
             sb.append(buf,0,len);
           }              
        }
        catch (Exception ex) { }
        finally {
            try {f.close();} catch (Exception e) {};
        }
        return sb.toString();
    }

    private void saveFileAsString(String file, String encoding, String string) {
        OutputStream outputStream = null;
        try {
            outputStream = new FileOutputStream(file);
            Writer writer = new OutputStreamWriter(outputStream, encoding);
            writer.write(string);
            writer.close();
        } catch (Exception ex) { }
        finally {
            if(outputStream != null)try {
                outputStream.close();
            } catch (IOException ex) { }
        }
    }
}

class ExtensionFileFilter extends javax.swing.filechooser.FileFilter {
  String description;

  String extensions[];

  public ExtensionFileFilter(String description, String extension) {
    this(description, new String[] { extension });
  }

  public ExtensionFileFilter(String description, String extensions[]) {
    if (description == null) {
      this.description = extensions[0];
    } else {
      this.description = description;
    }
    this.extensions = (String[]) extensions.clone();
    toLower(this.extensions);
  }

  private void toLower(String array[]) {
    for (int i = 0, n = array.length; i < n; i++) {
      array[i] = array[i].toLowerCase();
    }
  }

  public String getDescription() {
    return description;
  }

  public boolean accept(File file) {
    if (file.isDirectory()) {
      return true;
    } else {
      String path = file.getAbsolutePath().toLowerCase();
      for (int i = 0, n = extensions.length; i < n; i++) {
        String extension = extensions[i];
        if ((path.endsWith(extension) && (path.charAt(path.length() - extension.length() - 1)) == '.')) {
          return true;
        }
      }
    }
    return false;
  }
}
